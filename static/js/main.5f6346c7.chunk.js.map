{"version":3,"sources":["serviceWorker.js","components/child.jsx","components/parent.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Child","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","inherits","createClass","key","value","e","onDoubleValueChange","target","doubleValue","react_default","a","createElement","onChange","React","Component","multiply","division","divide","multiplication","arithOperation","convert","input","parseFloat","Number","isNaN","output","Math","round","toString","Parent","state","arithOpe","handleDivisionChange","handleMultiplicationChange","setState","child_Child","ReactDOM","render","parent_Parent","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oIAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,yGChBOC,EAAb,SAAAC,GACI,SAAAD,EAAYE,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACdG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KACDQ,aAAeP,EAAKO,aAAaC,KAAlBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAFNA,EADtB,OAAAC,OAAAS,EAAA,EAAAT,CAAAJ,EAAAC,GAAAG,OAAAU,EAAA,EAAAV,CAAAJ,EAAA,EAAAe,IAAA,eAAAC,MAAA,SAMiBC,GACTX,KAAKJ,MAAMgB,oBAAoBD,EAAEE,OAAOH,SAPhD,CAAAD,IAAA,SAAAC,MAAA,WAWQ,IAAMI,EAAcd,KAAKJ,MAAMkB,YAC/B,OACIC,EAAAC,EAAAC,cAAA,SAAOP,MAAOI,EAAaI,SAAUlB,KAAKI,mBAbtDV,EAAA,CAA2ByB,IAAMC,WCCjC,SAASC,EAASC,GACd,OAAOA,EAAS,EAGlB,SAASC,EAAOC,GACd,OAAsB,EAAfA,EAGT,SAASC,EAAef,EAAOgB,GAC7B,IAAMC,EAAQC,WAAWlB,GACzB,GAAImB,OAAOC,MAAMH,GACf,MAAO,GAET,IAAMI,EAASL,EAAQC,GAEvB,OADgBK,KAAKC,MAAe,IAATF,GAAiB,KAC7BG,WAEZ,IAAMC,EAAb,SAAAxC,GACI,SAAAwC,EAAYvC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmC,IACdtC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqC,GAAAhC,KAAAH,KAAMJ,KACDwC,MAAQ,CAAC1B,MAAM,GAAI2B,SAAU,KAClCxC,EAAKyC,qBAAuBzC,EAAKyC,qBAAqBjC,KAA1BP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAC5BA,EAAK0C,2BAA6B1C,EAAK0C,2BAA2BlC,KAAhCP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAJpBA,EADtB,OAAAC,OAAAS,EAAA,EAAAT,CAAAqC,EAAAxC,GAAAG,OAAAU,EAAA,EAAAV,CAAAqC,EAAA,EAAA1B,IAAA,6BAAAC,MAAA,SAQ+BA,GACvBV,KAAKwC,SAAS,CAAC9B,MAAOA,EAAMG,OAAOH,MAAO2B,SAAS,QAT3D,CAAA5B,IAAA,uBAAAC,MAAA,SAYyBA,GACjBV,KAAKwC,SAAS,CAAC9B,QAAO2B,SAAS,QAbvC,CAAA5B,IAAA,SAAAC,MAAA,WAiBQ,IAAM2B,EAAWrC,KAAKoC,MAAMC,SACtB3B,EAAQV,KAAKoC,MAAM1B,MACnBc,EAA8B,MAAba,EAAmBZ,EAAef,EAAOW,GAAYX,EACtEY,EAAwB,MAAbe,EAAmBZ,EAAef,EAAOa,GAAUb,EACpE,OACIK,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOoB,SAAS,IAAI3B,MAAOc,EAAgBN,SAAUlB,KAAKuC,6BAE1DxB,EAAAC,EAAAC,cAACwB,EAAD,CAAOJ,SAAS,IAAIvB,YAAaQ,EAAUV,oBAAqBZ,KAAKsC,4BAzBrFH,EAAA,CAA4BhB,IAAMC,WCflCsB,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAAYC,SAASC,eAAe,SH4H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5f6346c7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nexport class Child extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);   \r\n    }\r\n\r\n    handleChange(e){\r\n        this.props.onDoubleValueChange(e.target.value);\r\n    }\r\n\r\n    render(){\r\n        const doubleValue = this.props.doubleValue;\r\n        return(\r\n            <input value={doubleValue} onChange={this.handleChange}/>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { Child } from './child';\r\n\r\nfunction multiply(division) {\r\n    return division/2;\r\n  }\r\n  \r\n  function divide(multiplication) {\r\n    return multiplication*2;\r\n  }\r\n\r\n  function arithOperation(value, convert) {\r\n    const input = parseFloat(value);\r\n    if (Number.isNaN(input)) {\r\n      return '';\r\n    }\r\n    const output = convert(input);\r\n    const rounded = Math.round(output * 1000) / 1000;\r\n    return rounded.toString();\r\n  }\r\nexport class Parent extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {value:'', arithOpe: 'm'};\r\n        this.handleDivisionChange = this.handleDivisionChange.bind(this);\r\n        this.handleMultiplicationChange = this.handleMultiplicationChange.bind(this);\r\n    }\r\n\r\n    handleMultiplicationChange(value){\r\n        this.setState({value: value.target.value, arithOpe:'m'});\r\n    }\r\n\r\n    handleDivisionChange(value){\r\n        this.setState({value, arithOpe:'d'})\r\n    }\r\n\r\n    render(){\r\n        const arithOpe = this.state.arithOpe;\r\n        const value = this.state.value;\r\n        const multiplication = arithOpe === 'd' ? arithOperation(value, multiply) : value;\r\n        const division = arithOpe === 'm' ? arithOperation(value, divide) : value;\r\n        return(\r\n            <div>\r\n                <input arithOpe=\"m\" value={multiplication} onChange={this.handleMultiplicationChange}/>\r\n                {/* <Child arithOpe=\"m\" doubleValue={multiplication} onDoubleValueChange={this.handleMultiplicationChange}/> */}\r\n                <Child arithOpe=\"d\" doubleValue={division} onDoubleValueChange={this.handleDivisionChange}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport {Parent} from './components/parent';\n\nReactDOM.render(<Parent />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}